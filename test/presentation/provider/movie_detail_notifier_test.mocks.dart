// Mocks generated by Mockito 5.0.8 from annotations
// in submission_one_menjadi_flutter_developer_expert_ditonton_app/test/presentation/provider/movie_detail_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/common/failure_equatable.dart' as _i6;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/entities/movie_entities.dart' as _i9;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/entities/movie_detail.dart' as _i7;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/repositories/movie_repo.dart' as _i2;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/usecases/get_all_movie_detail.dart' as _i4;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/usecases/get_all_movie_recommendations.dart' as _i8;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/usecases/get_all_watchlist_status.dart' as _i10;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/usecases/remove_all_watchlist.dart' as _i12;
import 'package:submission_one_menjadi_flutter_developer_expert_ditonton_app/domain/usecases/save_all_watchlist.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeShowMovieRepository extends _i1.Fake implements _i2.MovieRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i4.GetAllMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movierepository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeShowMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.FailureEquitable, _i7.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i3.Either<_i6.FailureEquitable, _i7.MovieDetail>>.value(
              _FakeEither<_i6.FailureEquitable, _i7.MovieDetail>())) as _i5
          .Future<_i3.Either<_i6.FailureEquitable, _i7.MovieDetail>>);
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i8.GetAllMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movierepository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeShowMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.FailureEquitable, List<_i9.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i3.Either<_i6.FailureEquitable, List<_i9.Movie>>>.value(
              _FakeEither<_i6.FailureEquitable, List<_i9.Movie>>())) as _i5
          .Future<_i3.Either<_i6.FailureEquitable, List<_i9.Movie>>>);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i10.GetAllWatchListTvShowStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeShowMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i11.SaveAllWatchlistTvShow {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movierepository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeShowMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.FailureEquitable, String>> execute(_i7.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i3.Either<_i6.FailureEquitable, String>>.value(
                  _FakeEither<_i6.FailureEquitable, String>()))
          as _i5.Future<_i3.Either<_i6.FailureEquitable, String>>);
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i12.RemoveAllWatchlistTvShow {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeShowMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.FailureEquitable, String>> execute(_i7.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i3.Either<_i6.FailureEquitable, String>>.value(
                  _FakeEither<_i6.FailureEquitable, String>()))
          as _i5.Future<_i3.Either<_i6.FailureEquitable, String>>);
}
